#ifndef SHADER_H
#define SHADER_H

#include <string>
#include <fstream>
#include <sstream>
#include <iostream>

#include <../../GL/glew.h>

class Shader
{
	public:
		GLuint Program;
		//constructor generates shader on the fly
		Shader( const GLchar* vertexPath, const GLchar* fragmentPath )
		{
			//Retrieve the vertex/fragment source code from file path
                        std::string vertexCode;
                        std::string fragmentCode;
                        std::ifstream vShaderFile;
                        std::ifstream fShaderFile;

                        //Ensure ifstream objects can throw exceptions
                        vShaderFile.exceptions { std::ifstream::badbit };
                        fShaderFile.exceptions { std::ifstream::badbit };

                        try
                        {
                            //Open files
                            vSHaderFile.open( vertexPath );
                            fSaderFile.open( fragmentPath );
                            std::stringstream vShaderStream, fShaderStream;

                            //Read files' buffer contents into streams
                            vShaderStream << vShaderFile.rdbuf();
                            fShaderStream << fShaderFile.rdbuf();

                            //Close file handlers
                            vShaderFile.close();
                            fShaderFile.close();

                            //Convert stream into string
                            vertexCode = vShaderStream.str();
                            fragmentCode = fShaderStream.str();
                        }
                        catch ( std::ifstream::failure e )
                        {
                            std::cout << "ERROR::SHADER::FILE_NOT_SUCCESSFULLY_READ" << std::endl;
                        }



		}
}
